# Build stage
FROM node:20-alpine AS builder

RUN corepack enable && corepack prepare pnpm@9.0.0 --activate

WORKDIR /workspace

# Copy everything needed for build
COPY package.json pnpm-workspace.yaml pnpm-lock.yaml tsconfig.base.json ./
COPY packages ./packages
COPY apps/api ./apps/api

# Install dependencies
RUN pnpm install --frozen-lockfile

# Build
RUN cd apps/api && pnpm build

# Deploy stage - create standalone deployment
FROM node:20-alpine AS deployer

RUN corepack enable && corepack prepare pnpm@9.0.0 --activate

WORKDIR /workspace

# Copy for pnpm deploy
COPY package.json pnpm-workspace.yaml pnpm-lock.yaml ./
COPY --from=builder /workspace/apps/api/dist ./apps/api/dist
COPY apps/api/package.json ./apps/api/

# Use pnpm deploy to create standalone deployment with all deps
RUN pnpm deploy --filter=api --prod /app

# Copy built code to deploy
RUN cp -r apps/api/dist /app/apps/api/

# Runtime stage
FROM node:20-alpine AS runner

RUN apk add --no-cache dumb-init

RUN addgroup -g 1001 -S nodejs && adduser -S nestjs -u 1001

WORKDIR /app

ENV NODE_ENV=production
ENV PORT=4000

# Copy standalone deployment
COPY --from=deployer --chown=nestjs:nodejs /app ./

USER nestjs

EXPOSE 4000

HEALTHCHECK --interval=30s --timeout=3s --start-period=40s --retries=3 \
  CMD node -e "require('http').get('http://localhost:4000/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"

ENTRYPOINT ["dumb-init", "--"]

CMD ["node", "apps/api/dist/apps/api/src/main.js"]
